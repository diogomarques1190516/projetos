
:-dynamic geracoes/1.
:-dynamic populacao/1.
:-dynamic prob_cruzamento/1.
:-dynamic prob_mutacao/1.

% Primary knowledge base
:-consult('data.pl').

entregas(5).


% parameterizacao

inicializa:-%write('Numero de novas Geracoes: '),read(NG),
	NG is 20,
	(retract(geracoes(_));true), asserta(geracoes(NG)),
	%write('Dimensao da Populacao: '),read(DP),
	DP is 20,
	(retract(populacao(_));true), asserta(populacao(DP)),
	%write('Probabilidade de Cruzamento (%):'), read(P1),
	P1 is 20,
	PC is P1/100,
	(retract(prob_cruzamento(_));true),	asserta(prob_cruzamento(PC)),
	%write('Probabilidade de Mutacao (%):'), read(P2),
	P2 is 20,
	PM is P2/100,
	(retract(prob_mutacao(_));true), asserta(prob_mutacao(PM)).

random_permutation([[t2,t5,t4,t3,t1]*11,[t2,t1,t4,t5,t3]*13,[t2,t4,t3,t5,t1]*14,[t2,t5,t3,t4,t1]*14,[t2,t3,t4,t1,t5]*15,[t2,t1,t5,t4,t3]*16,[t4,t3,t1,t2,t5]*29,[t1,t4,t5,t2,t3]*34],LRP),nl,write('LRP='),write(LRP),nl.


	subdivide(L,N,L1,L2):-append(L1,L2,L),length(L1,N).


divide(L,R1,R2):-subdivide(L,S1,R1,_),subdivide(L,S2,R2,_),S2 is S1+S1+S1,length(L,S),S is S1+S1+S1+S1.

updateLowestGera(LCPerm,Time):-
    lowestTimeGera(_,TimeMin),
    ((Time<TimeMin,!,retract(lowestTimeGera(_,_)),assertz(lowestTimeGera(LCPerm,Time)));true).



gera:-
	inicializa,
        retractall(lowestTimeGera(_,_)), assertz(lowestTimeGera(_,10000000)),
	gera_populacao(Pop),
	write('Pop='),write(Pop),nl,
	avalia_populacao(Pop,PopAv),
	write('PopAv='),write(PopAv),nl,
	ordena_populacao(PopAv,PopOrd),
	write('PopOrd='),write(PopOrd),nl,
	geracoes(NG), % num geracoes
	gera_geracao(0,NG,PopOrd).

gera_populacao(Pop):-
	populacao(TamPop),
	entregas(NumE),
	findall(Cidade,entrega(_,_,_,Cidade,_,_),ListaEntregas),
	gera_populacao(TamPop,ListaEntregas,NumE,Pop).

gera_populacao(0,_,_,[]):-!.

gera_populacao(TamPop,ListaEntregas,NumE,[Ind|Resto]):-
	TamPop1 is TamPop-1,
	gera_populacao(TamPop1,ListaEntregas,NumE,Resto),
	gera_individuo(ListaEntregas,NumE,Ind),
	not(member(Ind,Resto)).

gera_populacao(TamPop,ListaEntregas,NumE,L):-
	gera_populacao(TamPop,ListaEntregas,NumE,L).

gera_individuo([G],1,[G]):-!.

gera_individuo(ListaEntregas,NumE,[G|Resto]):-
	NumTemp is NumE + 1, % To use with random
	random(1,NumTemp,N),
	retira(N,ListaEntregas,G,NovaLista),
	NumE1 is NumE-1,
	gera_individuo(NovaLista,NumE1,Resto).

retira(1,[G|Resto],G,Resto).
retira(N,[G1|Resto],G,[G1|Resto1]):-
	N1 is N-1,
	retira(N1,Resto,G,Resto1).


% AVALIACAO

%a remocao_pesos

remocao_pesos([],[],0).                             % No backtracking, adiciona o peso cumulativo das entregas
remocao_pesos([Armazem|LC],[PesoAc|LP],PesoAc):-
    remocao_pesos(LC,LP,PesoAc1),entrega(_,_,Peso,Armazem,_,_),PesoAc is Peso+PesoAc1.

% Adiciona a tara a cada um dos pesos, e adiciona o valor da tara no final da lista
acrescenta_tara(Tara,[],[Tara]).
acrescenta_tara(Tara,[Peso|LP],[PesoTara|LPT]):-
    acrescenta_tara(Tara,LP,LPT),
    PesoTara is Peso+Tara.

% c calcula_custo
% LC -> Lista Cidades

avalia_populacao([],[]).
avalia_populacao([Ind|Resto],[Ind*Custo|Resto1]):-
	%write("INDDDD"),nl,
	%write(Ind),nl,
	carateristicasCam(Camiao1,_,_,_,_,_),
	calcula_custo(Camiao1,Ind,Custo),
	%write("COST"),nl,
	%write(Custo),nl,
	updateLowestGera(Ind,Custo),
	avalia_populacao(Resto,Resto1).

calcula_custo(Camiao,LC,Custo):-
    remocao_pesos(LC,LP,_),                         % Vai buscar lista com a soma cumulativa dos pesos
    %term_string(Camiao,Camiao1),

    %atom_to_term(Camiao,Camiao,_),
    carateristicasCam(Camiao,Tara,_,Autonomia,_,_), % Vai buscar a tara do camiao
    acrescenta_tara(Tara,LP,LPT),                   % Acrescenta a tara do camiao
    origin(Cin),                    % Vai buscar id do armazem de partida/destino (Matosinhos)
    append([Cin|LC],[Cin],LCcompleto),              % Adiciona o armazem principal ao inicio e final da lista
    %write("Caminho"),nl,print_list(LCcompleto),nl,
    %write("Pesos"),nl,print_list(LPT),nl,
    %custo(Camiao,LCcompleto,LPT,Custo).                    % Calcula o custo para esse percurso
    custo(Camiao,LCcompleto,LPT,Autonomia,Custo).

custo(_,[_],[],_,0).
custo(Camiao,[C1,C2|LC],[PT|LPT],Autonomia,Custo):-
    %term_string(Camiao,Camiao1),
    dadosCam_t_e_ta(Camiao,C1,C2,Temp,Energ,TempoAdicional),       % Vai buscar o tempo de deslocamento entre os dois armazens (so numa direcao pois sao diferentes),
    carateristicasCam(Camiao,Tara,CapacidadeCarga,CapacidadeBateria,_,TRecarr),  % Vai buscar a Autonomia da
    CargaTotal is Tara + CapacidadeCarga,               % Carga Total do camiao
    Tempo is Temp * PT / CargaTotal,                    % Tempo do trajeto ate C2
    Energia is Energ * PT / CargaTotal,                 % Energia do trajeto ate C2
    Battery80 is 0.8 * CapacidadeBateria,               % Bateria nos 80%
    Battery20 is 0.2 * CapacidadeBateria,               % Bateria nos 20%
    AutonomiaChegada is Autonomia - Energia,            % Bateria na chegada a C2 (sem carregamentos)
    % Tempo de carregamento rapido para a bateria necessaria
    TempoCarrRapido is (Battery80 - Autonomia) * TRecarr / (Battery80 - Battery20),
    (entrega(_,_,_,C1,_,_),!,entrega(_,_,_,C1,_,TempoRet) % Valor do tempo de retirada da carga
        ; TempoRet is 0),
    % Maior dos tempos entre tempo de descarregamento da carga e tempo do recarregamento da bateria
    (TempoRet > TempoCarrRapido,!, MTParagem is TempoRet; MTParagem is TempoCarrRapido),
    % Necessario carregamento em C1 ate 80% e intermedio
    ((AutonomiaChegada < Battery20 , Battery80 - Energia < Battery20,!,BateriaRestante is Battery20, TParagem is MTParagem, TAdicional is TempoAdicional) ;
        % Necessario apenas carregamento em C1
        (Autonomia - Energia < Battery20,!,BateriaRestante is Battery80, TParagem is MTParagem, TAdicional is 0) ;
        % Carregamento nao necessario
        BateriaRestante is AutonomiaChegada, TParagem is TempoRet, TAdicional is 0 ),
    custo(Camiao, [C2|LC],LPT,BateriaRestante, Custo1),
    Custo is Custo1 + Tempo + TParagem + TAdicional.

% Fim avaliacao

ordena_populacao(PopAv,PopAvOrd):-
	bsort(PopAv,PopAvOrd).

bsort([X],[X]):-!.
bsort([X|Xs],Ys):-
	bsort(Xs,Zs),
	btroca([X|Zs],Ys).


btroca([X],[X]):-!.

btroca([X*VX,Y*VY|L1],[Y*VY|L2]):-
	VX>VY,!,
	btroca([X*VX|L1],L2).

btroca([X|L1],[X|L2]):-btroca(L1,L2).


gera_geracao(G,G,Pop):-!,
	write('Geracao end '), write(G), write(' :'), nl, write(Pop), nl.

gera_geracao(N,G,Pop):-
	write('Geracao '), write(N), write(':'), nl, write(Pop), nl,
	%write(L),
	divide(Pop,L1,L3),
	random_permutation(L3,LRP),
	cruzamento(LRP,NPop1),
	mutacao(NPop1,NPop),

	avalia_populacao(NPop,NPopAv),



append(L1,NPopAv,NewPop),
ordena_populacao(NewPop,NPopOrd),
	N1 is N+1,

	gera_geracao(N1,G,NPopOrd).

gerar_pontos_cruzamento(P1,P2):-
	gerar_pontos_cruzamento1(P1,P2).

gerar_pontos_cruzamento1(P1,P2):-
	entregas(N),
	NTemp is N+1,
	random(1,NTemp,P11),
	random(1,NTemp,P21),
	P11\==P21,!,
	((P11<P21,!,P1=P11,P2=P21);(P1=P21,P2=P11)).
gerar_pontos_cruzamento1(P1,P2):-
	gerar_pontos_cruzamento1(P1,P2).


cruzamento([],[]).
cruzamento([Ind*_],[Ind]).
cruzamento([Ind1*_,Ind2*_|Resto],[NInd1,NInd2|Resto1]):-
	gerar_pontos_cruzamento(P1,P2),
	prob_cruzamento(Pcruz),random(0.0,1.0,Pc),
	((Pc =< Pcruz,!,
        cruzar(Ind1,Ind2,P1,P2,NInd1),
	  cruzar(Ind2,Ind1,P1,P2,NInd2))
	;
	(NInd1=Ind1,NInd2=Ind2)),
	cruzamento(Resto,Resto1).

preencheh([],[]).

preencheh([_|R1],[h|R2]):-
	preencheh(R1,R2).


sublista(L1,I1,I2,L):-
	I1 < I2,!,
	sublista1(L1,I1,I2,L).

sublista(L1,I1,I2,L):-
	sublista1(L1,I2,I1,L).

sublista1([X|R1],1,1,[X|H]):-!,
	preencheh(R1,H).

sublista1([X|R1],1,N2,[X|R2]):-!,
	N3 is N2 - 1,
	sublista1(R1,1,N3,R2).

sublista1([_|R1],N1,N2,[h|R2]):-
	N3 is N1 - 1,
	N4 is N2 - 1,
	sublista1(R1,N3,N4,R2).

rotate_right(L,K,L1):-
	entregas(N),
	E is N - K,
	rr(E,L,L1).

rr(0,L,L):-!.

rr(N,[X|R],R2):-
	N1 is N - 1,
	append(R,[X],R1),
	rr(N1,R1,R2).


elimina([],_,[]):-!.

elimina([X|R1],L,[X|R2]):-
	not(member(X,L)),!,
	elimina(R1,L,R2).

elimina([_|R1],L,R2):-
	elimina(R1,L,R2).

insere([],L,_,L):-!.
insere([X|R],L,N,L2):-
	entregas(E),
	((N>E,!,N1 is N mod E);N1 = N),
	insere1(X,N1,L,L1),
	N2 is N + 1,
	insere(R,L1,N2,L2).


insere1(X,1,L,[X|L]):-!.
insere1(X,N,[Y|L],[Y|L1]):-
	N1 is N-1,
	insere1(X,N1,L,L1).

cruzar(Ind1,Ind2,P1,P2,NInd11):-
	sublista(Ind1,P1,P2,Sub1),
	entregas(NumE),
	R is NumE-P2,
	rotate_right(Ind2,R,Ind21),
	elimina(Ind21,Sub1,Sub2),
	P3 is P2 + 1,
	insere(Sub2,Sub1,P3,NInd1),
	eliminah(NInd1,NInd11).


eliminah([],[]).

eliminah([h|R1],R2):-!,
	eliminah(R1,R2).

eliminah([X|R1],[X|R2]):-
	eliminah(R1,R2).

mutacao([],[]).
mutacao([Ind|Rest],[NInd|Rest1]):-
	prob_mutacao(Pmut),
	random(0.0,1.0,Pm),
	((Pm < Pmut,!,mutacao1(Ind,NInd));NInd = Ind),
	mutacao(Rest,Rest1).

mutacao1(Ind,NInd):-
	gerar_pontos_cruzamento(P1,P2),
	mutacao22(Ind,P1,P2,NInd).

mutacao22([G1|Ind],1,P2,[G2|NInd]):-
	!, P21 is P2-1,
	mutacao23(G1,P21,Ind,G2,NInd).
mutacao22([G|Ind],P1,P2,[G|NInd]):-
	P11 is P1-1, P21 is P2-1,
	mutacao22(Ind,P11,P21,NInd).

mutacao23(G1,1,[G2|Ind],G2,[G1|Ind]):-!.
mutacao23(G1,P,[G|Ind],G2,[G|NInd]):-
	P1 is P-1,
	mutacao23(G1,P1,Ind,G2,NInd).


